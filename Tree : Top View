import java.util.*;
import java.io.*;

class Node {
    Node left;
    Node right;
    int data;
    
    Node(int data) {
        this.data = data;
        left = null;
        right = null;
    }
}

class Solution {
    static class Pair{
        int hd;
        Node node;
        Pair(Node node,int hd){
            this.node=node;
            this.hd=hd;
        }
    }
	public static void topView(Node root) {
      HashMap<Integer , Node> map=new HashMap<>();
      int min=0,max=0;
      Queue<Pair> q= new LinkedList<Pair>();
      q.add(new Pair(root,0));
      while(!q.isEmpty()){
        Pair currNode = q.remove();
        if(currNode==null){
            break;
        }
        else{
            if(!map.containsKey(currNode.hd)) {
              map.put(currNode.hd,currNode.node);
            } 
            if(currNode.node.left!=null){
              q.add(new Pair(currNode.node.left,currNode.hd-1));
              min=Math.min(min,currNode.hd-1);
            }
            if(currNode.node.right!=null){
              q.add(new Pair(currNode.node.right,currNode.hd+1));
              max=Math.max(max,currNode.hd+1);
            }
        }
      } 
      for(int i=min;i<=max;i++){
             System.out.print(map.get(i).data+" ");
      }
    }
	public static Node insert(Node root, int data) {
        if(root == null) {
            return new Node(data);
        } else {
            Node cur;
            if(data <= root.data) {
                cur = insert(root.left, data);
                root.left = cur;
            } else {
                cur = insert(root.right, data);
                root.right = cur;
            }
            return root;
        }
    }

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int t = scan.nextInt();
        Node root = null;
        while(t-- > 0) {
            int data = scan.nextInt();
            root = insert(root, data);
        }
        scan.close();
        topView(root);
    }	
}
