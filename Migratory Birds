import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;
class Result {

    public static int migratoryBirds(List<Integer> arr) {
        Collections.sort(arr);
        List <Integer> d=arr.stream().distinct().collect(Collectors.toList());    
        List <Integer> d1=new ArrayList<Integer>();
        List <Integer> d2=new ArrayList<Integer>();
        
     for(int i=0;i<d.size();i++){
         d1.add(Collections.frequency(arr,d.get(i)));
     }
     int max=Collections.max(d1);
     int n=0;
     for(int j=1;j<d1.size();j++){
         if(max==d1.get(j)){
             d2.add(d.get(j));
             n++;
         }
     }
     int val=d2.get(0);
     if(n>1){
         return Collections.min(d2);
     }
     else{
         return val;
     }
    }
}
public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int arrCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> arr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        int result = Result.migratoryBirds(arr);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
